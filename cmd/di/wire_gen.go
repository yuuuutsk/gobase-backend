// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package di

import (
	"database/sql"

	"github.com/yuuuutsk/gobase-backend/app/cli_usecase"
	"github.com/yuuuutsk/gobase-backend/app/infrastracture/repository"
	"github.com/yuuuutsk/gobase-backend/app/usecase"
	"github.com/yuuuutsk/gobase-backend/cmd"
	"github.com/yuuuutsk/gobase-backend/pkg"
	"github.com/yuuuutsk/gobase-backend/pkg/logger"
)

// Injectors from define.go:

func InitCLIUseCases(db *sql.DB, config *cmd.Config, twClient *cmd.TwitterClients, logger2 logger.Logger, clock pkg.Clock) *CLIUseCases {
	todoRepository := repository.NewTagRepository(db, logger2)
	todoUseCase := cli_usecase.NewTodoUseCase(db, todoRepository)
	cliUseCases := NewCLIUseCases(todoUseCase)
	return cliUseCases
}

func InitUseCases(db *sql.DB, config *cmd.Config, twClient *cmd.TwitterClients, logger2 logger.Logger, clock pkg.Clock) *UseCases {
	todoRepository := repository.NewTagRepository(db, logger2)
	todoUseCase := usecase.NewTagUseCase(db, todoRepository, logger2)
	userRepository := repository.NewUserRepository(db, logger2)
	userUseCase := usecase.NewUserUseCase(db, userRepository, logger2)
	useCases := NewUseCases(todoUseCase, userUseCase)
	return useCases
}
